#ifndef FILEUTILS_H
#define FILEUTILS_H

#include <string>
#include <cstdlib>
#include <fstream> // Include this header for std::ifstream
#include "root_directory.h" // This is a configuration file generated by CMake.

class FileUtils
{
private:
  typedef std::string (*Builder) (const std::string& path);

public:
  static std::string getPath(const std::string& path)
  {
    static std::string(*pathBuilder)(std::string const &) = getPathBuilder();
    return (*pathBuilder)(path);
  }
  static bool doesPathExist(const std::string& path)
  {
    std::ifstream file(path);
    return file.good();
  }
  static std::string getResourcePath(const std::string& path) 
  {
    return getPath("resources/" + path);
  }
  static bool doesAssetExist(const std::string& path)
  {
    std::ifstream file(getResourcePath(path));
    return file.good();
  }

  static std::string getParentOfRoot()
  {
    std::string root = getRoot();
    if (root.empty()) 
    {
      return "";
    }
    std::filesystem::path rootPath(root);
    return rootPath.parent_path().string();
  }

private:
  static std::string const & getRoot()
  {
    static char const * envRoot = getenv("LOGL_ROOT_PATH");
    static char const * givenRoot = (envRoot != nullptr ? envRoot : ROOT_DIR);
    static std::string root = (givenRoot != nullptr ? givenRoot : "");
    return root;
  }

  static Builder getPathBuilder()
  {
    if (getParentOfRoot() != "")
      return &FileUtils::getParentOfRoot;
    else
      return &FileUtils::getPathRelativeBinary;
  }

  static std::string getPathRelativeRoot(const std::string& path)
  {
    return getRoot() + std::string("/") + path;
  }

  static std::string getPathRelativeBinary(const std::string& path)
  {
    return "../../../" + path;
  }
  
};

#endif // FILEUTILS_H
