#ifndef FILEUTILS_H
#define FILEUTILS_H

#include <string>
#include <cstdlib>
#include <fstream> // Include this header for std::ifstream
#include "root_directory.h" // This is a configuration file generated by CMake.

class FileUtils
{
private:
  typedef std::string (*Builder) (const std::string& path);

public:
  static std::string getPath(const std::string& path)
  {
    static std::string(*pathBuilder)(std::string const &) = getPathBuilder();
    return (*pathBuilder)(path);
  }

  static bool doesPathExist(const std::string& path)
  {
    std::ifstream file(path);
    return file.good();
  }

  static std::string getResourcePath(const std::string& path) 
  {
    size_t pos = path.find("resources/");
    std::string cleanPath = (pos != std::string::npos) ? path.substr(pos + 10) : path;
    std::string pathN = getPath("resources/" + cleanPath);
    if (doesPathExist(pathN)) {
      return pathN;
    } else {
      return getProjPath("resources/" + cleanPath);
    }
  }

  static bool doesAssetExist(const std::string& path)
  {
    std::ifstream file(getResourcePath(path));
    return file.good();
  }

  // New method to retrieve the PROJ_DIR path
  static std::string getProjDir()
  {
    static std::string const & projDir = getProjDirPath();
    return projDir;
  }

  // New method to get the path relative to PROJ_DIR
  static std::string getProjPath(const std::string& path)
  {
    static std::string(*projPathBuilder)(std::string const &) = getProjPathBuilder();
    return (*projPathBuilder)(path);
  }

private:
  static std::string const & getRoot()
  {
    static char const * envRoot = getenv("LOGL_ROOT_PATH");
    static char const * givenRoot = (envRoot != nullptr ? envRoot : ROOT_DIR);
    static std::string root = (givenRoot != nullptr ? givenRoot : "");
    return root;
  }

  // New method to retrieve PROJ_DIR environment variable or fallback to CMake variable
  static std::string const & getProjDirPath()
  {
    static char const * envProjDir = getenv("LOGL_PROJ_PATH"); // Assuming this is the environment variable for PROJ_DIR
    static char const * givenProjDir = (envProjDir != nullptr ? envProjDir : PROJ_DIR); // Assuming PROJ_DIR is defined in the CMake configuration
    static std::string projDir = (givenProjDir != nullptr ? givenProjDir : "");
    return projDir;
  }

  static Builder getPathBuilder()
  {
    if (getRoot() != "")
      return &FileUtils::getPathRelativeRoot;
    else
      return &FileUtils::getPathRelativeBinary;
  }

  static std::string getPathRelativeRoot(const std::string& path)
  {
    return getRoot() + std::string("/") + path;
  }

  static std::string getPathRelativeBinary(const std::string& path)
  {
    return "../../../" + path;
  }

  // Builder for the PROJ_DIR path
  static Builder getProjPathBuilder()
  {
    if (getProjDir() != "")
      return &FileUtils::getPathRelativeProjDir;
    else
      return &FileUtils::getPathRelativeBinary; // Fallback if PROJ_DIR is not available
  }

  static std::string getPathRelativeProjDir(const std::string& path)
  {
    return getProjDir() + std::string("/") + path;
  }

};

#endif // FILEUTILS_H
