layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aOffset;
layout (location = 4) in ivec4 aBoneIDs;
layout (location = 5) in vec4 aWeights;

out vec3 FragPos;
out vec2 TexCoords;
out vec3 Normal;
out vec3 WorldNormal;
out vec3 WorldPos;
out vec4 FragPosLightSpace;

uniform bool invertedNormals;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 lightSpaceMatrix;

uniform bool isAnimation;
uniform mat4 bones[40]; // Ensure this size matches the number of bones used in your models

void main()
{
    vec4 worldPos = model * vec4(aPos + aOffset, 1.0);
    WorldPos = worldPos.xyz;

    mat4 skinning = mat4(0.0);
    if (isAnimation) {
        // Initialize skinning matrix as zero matrix
        skinning = mat4(0.0);
        // Accumulate the transformations from each affecting bone
        int counter = 0;
        for (int i = 0; i < 4; i++) {
            int boneID = aBoneIDs[i];
            float weight = aWeights[i];
            if (boneID >= 0 && boneID < 40) { // Validate bone index and ensure it's within bounds
                skinning += bones[boneID] * weight;
                counter++;
            }
        }
        skinning = skinning/counter;
    } else {
        // No animation, just use the identity matrix
        skinning = mat4(1.0);
    }

    vec4 viewPos = view * model * vec4(aPos + aOffset, 1.0);
    FragPos = viewPos.xyz; 
    TexCoords = aTexCoords;

    WorldNormal = aNormal;

    mat3 normalMatrix = transpose(inverse(mat3(view * model)));
    Normal = normalMatrix * (invertedNormals ? -aNormal : aNormal);
    
    gl_Position = projection * viewPos;

    FragPosLightSpace = lightSpaceMatrix * vec4(worldPos.xyz, 1.0);
}