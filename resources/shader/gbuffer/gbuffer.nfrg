#version 330 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec3 gAlbedo;
layout (location = 3) out vec3 gPositionWorld;
layout (location = 4) out vec3 gNormalWorld;
layout (location = 5) out vec3 gDepth;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;
in vec3 WorldNormal;
in vec3 WorldPos;
in vec4 FragPosLightSpace;

uniform sampler2D textureDiffuse;

float near = 0.1; 
float far  = 100.0; 

float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}


void main()
{    
    // store the fragment position vector in the first gbuffer texture
    gPosition = FragPos;
    // also store the per-fragment normals into the gbuffer
    gNormal = normalize(Normal);
    // and the diffuse per-fragment color
    gAlbedo = texture(textureDiffuse, TexCoords).rgb;
    gPositionWorld = WorldPos;
    gNormalWorld = WorldNormal;

    float depth = LinearizeDepth(gl_FragCoord.z) / far; // divide by far for demonstration

    gDepth = vec3(depth);
}